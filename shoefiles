#!/bin/bash
###############################################################################
# shoefiles (bash script)
# This script handles installation of shoelick's dotfiles.
###############################################################################

main() {

    echo "Shoelick Dotfiles"
    echo "Updated November '16"

    export DEBUG_OUTPUT=
    export DOTFILES_REPO_DIR="$( \cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    export DOTFILES_DIR="$HOME/.dotfiles"
    export DOTFILES_BACKUP=
    export SUBCMD=
    export TARGET=
    export PLATFORM=
    export ISGROUP=

    source "$DOTFILES_REPO_DIR/shoes/util.sh"
    source "$DOTFILES_REPO_DIR/shoes/shoes.conf"

    # Debug warning will show if above var is set
    Debug "Debugging is ON! To turn off, unset DEBUG_OUTPUT in shoefiles script."

    RetVal=0;

    #
    # Check args
    #
    Debug "Shoefiles received $@"
    AreArgsValid $@
    RetVal=$?

    # Exit if invalid usage
    [ $RetVal -gt $ERROR_CODE_NONE ] && PrintUsage && return $RetVal;

    #
    # Detect Platform
    #
    Debug "Entering platform check." 
    DetectPlatform
    RetVal=$?
    Debug "We are on $PLATFORM"
    # Exit if invalid 
    [ $RetVal -gt $ERROR_CODE_NONE ] && return $RetVal;
    echo "Detected $PLATFORM. Lucky for you, $PLATFORM is supported."

    #
    # Setup / check core
    #
    Debug "Attempting to run $DOTFILES_REPO_DIR/core/${PLATFORM}.sh"
    source "$DOTFILES_REPO_DIR/core/$PLATFORM.sh"

    #
    # Move dotfiles to final location
    #
    ConfigureDotfilesDir
    RetVal=$?
    [ $RetVal -gt $ERROR_CODE_NONE ] && return $RetVal;

    #
    # Configure git
    #
    GIT_EMAIL="$(git config --global user.email)"
    Debug "Git email is: $GIT_EMAIL"
    if [ -z "$GIT_EMAIL" ]; then

        Debug "git email not set"
        EMAIL=$(EmailPrompt "Enter a valid email: ")
        Debug "Email is: $EMAIL"
        git config --global user.email $EMAIL
    fi

    GIT_USERNAME="$(git config --global user.name)"
    Debug "Git name is: $GIT_USERNAME"
    if [ -z "$GIT_USERNAME" ]; then

        Debug "git name not set"
        read -p "Git user name: " INPUT
        Debug "Using $INPUT for git user name"
        git config --global user.name $INPUT
    fi

    # Install global gitignore
    InstallFiles "$DOTFILES_DIR/shoes/.gitignore_global" "$HOME"
    git config --global core.excludesfile ~/.gitignore_global

    #
    # Evaluate command
    #
    if containsElement $TARGET $SUPPORTED_GROUPS ; then
        Debug "Preparing to install group $TARGET"
        # Convert to all caps for variable name
        TARGET=$(echo $TARGET | tr '[a-z]' '[A-Z]')
        GROUPVAR="GROUP_$TARGET"
        Debug "Final package group varname: $GROUPVAR"
        for PKG in ${!GROUPVAR}; do
            RunPackageOp $SUBCMD $PKG
        done;
    elif containsElement $TARGET $SUPPORTED_TARGETS ; then
        Debug "Preparing to install package $TARGET"
        RunPackageOp $SUBCMD $TARGET
    else 
        echo "Target $TARGET not supported."
    fi
    
    echo "Shoefiles complete. Sparing you from shoe puns."
    return $RetVal


    ## Perform update on dotfiles repo and submodules
    #if [ -d "${DOTFILES_DIR}/.git" ]; then
    #    git --work-tree="${DOTFILES_DIR}" --git-dir="${DOTFILES_DIR}/.git" pull \
        #        --recurse-submodules=yes origin master
    #    git submodule init
    #    git submodule update
    #fi

} 

main $@
cd .
